{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_getfilelist",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Copyfiltereddata",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "splitstatusReady"
				},
				{
					"name": "derivedStatus"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Timestamp as string,",
				"          { Connection} as string,",
				"          { Uptime} as string,",
				"          { Status} as string,",
				"          { IO State} as string,",
				"          { SoC [%]} as string,",
				"          { Pack Voltage [V]} as string,",
				"          { Pack Current [A]} as string,",
				"          { Max. Cell Voltage [mV]} as string,",
				"          { Min. Cell Voltage [mV]} as string,",
				"          { Max. Cell Temperature [C]} as string,",
				"          { Min. Cell Temperature [C]} as string,",
				"          {MCU AUX temperature sensor 1 [C]} as string,",
				"          {MCU AUX temperature sensor 2 [C]} as string,",
				"          {MCU AUX temperature sensor 3 [C]} as string,",
				"          {MCU AUX temperature sensor 4 [C]} as string,",
				"          {MCU AUX temperature sensor 5 [C]} as string,",
				"          {MCU AUX temperature sensor 6 [C]} as string,",
				"          {MOSFET temperature sensor [C]} as string,",
				"          {Ambient temperature sensor [C]} as string,",
				"          {Dynamic Current IN limit [A]} as string,",
				"          {Dynamic Current OUT limit [A]} as string,",
				"          {Requested Charge Current [A]} as string,",
				"          {Charge complete? (latched) []} as string,",
				"          {Remaining Battery Pack Capacity [As]} as string,",
				"          {Battery Pack Capacity [Ah]} as string,",
				"          {State of Health [%]} as string,",
				"          { Alarm Entry 1} as string,",
				"          { Alarm Entry 2} as string,",
				"          { Alarm Entry 3} as string,",
				"          { Alarm Entry 4} as string,",
				"          { Alarm Entry 5} as string,",
				"          { Alarm Entry 6} as string,",
				"          { Alarm Entry 7} as string,",
				"          { Alarm Entry 8} as string,",
				"          {CMU: 1 Cell: 1 (Pack 1) [mV]} as string,",
				"          {CMU: 1 Cell: 2 (Pack 2) [mV]} as string,",
				"          {CMU: 1 Cell: 3 (Pack 3) [mV]} as string,",
				"          {CMU: 1 Cell: 4 (Pack 4) [mV]} as string,",
				"          {CMU: 1 Cell: 5 (Pack 5) [mV]} as string,",
				"          {CMU: 1 Cell: 6 (Pack 6) [mV]} as string,",
				"          {CMU: 1 Cell: 7 (Pack 7) [mV]} as string,",
				"          {CMU: 1 Cell: 8 (Pack 8) [mV]} as string,",
				"          {CMU: 1 Cell: 9 (Pack 9) [mV]} as string,",
				"          {CMU: 1 Cell: 10 (Pack 10) [mV]} as string,",
				"          {CMU: 1 Cell: 11 (Pack 11) [mV]} as string,",
				"          {CMU: 1 Cell: 12 (Pack 12) [mV]} as string,",
				"          {CMU: 1 Cell: 13 (Pack 13) [mV]} as string,",
				"          {CMU: 1 Cell: 14 (Pack 14) [mV]} as string,",
				"          {CMU: 1 Cell: 15 (Pack 15) [mV]} as string,",
				"          {CMU: 1 Cell: 16 (Pack 16) [mV]} as string,",
				"          {CMU: 1 Cell: 17 (Pack 17) [mV]} as string,",
				"          {CMU: 1 Cell: 18 (Pack 18) [mV]} as string,",
				"          {CMU: 2 Cell: 1 (Pack 19) [mV]} as string,",
				"          {CMU: 2 Cell: 2 (Pack 20) [mV]} as string,",
				"          {CMU: 2 Cell: 3 (Pack 21) [mV]} as string,",
				"          {CMU: 2 Cell: 4 (Pack 22) [mV]} as string,",
				"          {CMU: 2 Cell: 5 (Pack 23) [mV]} as string,",
				"          {CMU: 2 Cell: 6 (Pack 24) [mV]} as string,",
				"          {CMU: 2 Cell: 7 (Pack 25) [mV]} as string,",
				"          {CMU: 2 Cell: 8 (Pack 26) [mV]} as string,",
				"          {CMU: 2 Cell: 9 (Pack 27) [mV]} as string,",
				"          {CMU: 2 Cell: 10 (Pack 28) [mV]} as string,",
				"          {CMU: 2 Cell: 11 (Pack 29) [mV]} as string,",
				"          {CMU: 2 Cell: 12 (Pack 30) [mV]} as string,",
				"          {CMU: 2 Cell: 13 (Pack 31) [mV]} as string,",
				"          {CMU: 2 Cell: 14 (Pack 32) [mV]} as string,",
				"          {CMU: 2 Cell: 15 (Pack 33) [mV]} as string,",
				"          {CMU: 2 Cell: 16 (Pack 34) [mV]} as string,",
				"          {CMU: 2 Cell: 17 (Pack 35) [mV]} as string,",
				"          {CMU: 2 Cell: 18 (Pack 36) [mV]} as string,",
				"          {Balancing Cells CMU #1} as string,",
				"          {Balancing Cells CMU #2} as string,",
				"          {Custom Data # 1 (ID_36_CONTACTORS_ACTIVATE_CHARGE) [][Decimal]} as string,",
				"          {Custom Data # 2 (ID_34_STATUS) [][Decimal]} as string,",
				"          {Custom Data # 3 (ID_37_CONTACTORS_ACTIVATE_LOAD) [][Decimal]} as string,",
				"          {Custom Data # 4 () []} as string,",
				"          {Custom Data # 5 () []} as string,",
				"          {Custom Data # 6 () []} as string,",
				"          {Custom Data # 7 () []} as string,",
				"          {Custom Data # 8 () []} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          Timestamp,",
				"          { Connection},",
				"          { Uptime},",
				"          { Status},",
				"          { IO State},",
				"          { SoC [%]},",
				"          { Pack Voltage [V]},",
				"          { Pack Current [A]},",
				"          { Cell Voltage [mV]} = { Max. Cell Voltage [mV]},",
				"          { Cell Voltage [mV]} = { Min. Cell Voltage [mV]},",
				"          { Cell Temperature [C]} = { Max. Cell Temperature [C]},",
				"          { Cell Temperature [C]} = { Min. Cell Temperature [C]},",
				"          {MCU AUX temperature sensor 1 [C]},",
				"          {MCU AUX temperature sensor 2 [C]},",
				"          {MCU AUX temperature sensor 3 [C]},",
				"          {MCU AUX temperature sensor 4 [C]},",
				"          {MCU AUX temperature sensor 5 [C]},",
				"          {MCU AUX temperature sensor 6 [C]},",
				"          {MOSFET temperature sensor [C]},",
				"          {Ambient temperature sensor [C]},",
				"          {Dynamic Current IN limit [A]},",
				"          {Dynamic Current OUT limit [A]},",
				"          {Requested Charge Current [A]},",
				"          {Charge complete? (latched) []},",
				"          {Remaining Battery Pack Capacity [As]},",
				"          {Battery Pack Capacity [Ah]},",
				"          {State of Health [%]}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split( { Status} == 'READY' ,",
				"     { Status} == 'ACTIVE',",
				"     disjoint: false) ~> splitstatusReady@(ReadyStatus, ActiveStatus)",
				"splitstatusReady@ReadyStatus derive({ Status_with_Soc} = { Status} + 'State' +{ SoC [%]}) ~> derivedStatus",
				"derivedStatus sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}